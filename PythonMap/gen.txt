def save_kriging_report_pdf(
    output_path,
    results,
    formula_image_path='formula_kriging.jpg',
    html_screenshot_path='map_screenshot.jpg',
    kriging_labels_image_path='ox_kriging_with_labels_only.png',
    additional_image_path='ox_kriging_loocv.jpg',
    title="Simple Kriging Cross-validation Report"
):
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4, landscape
    from reportlab.lib.units import mm
    from PIL import Image

    page_width, page_height = landscape(A4)
    c = canvas.Canvas(output_path, pagesize=(page_width, page_height))
    margin = 15 * mm
    col_split = page_width / 2

    col1_w = page_width * (1 / 3)
    col2_w = page_width * (2 / 3)

    # === Title ===
    c.setFont("Helvetica-Bold", 15)
    c.drawString(margin, page_height - margin, title)

    # === Formula image ===
    if formula_image_path and os.path.exists(formula_image_path):
        formula_w = col_split - 2 * margin
        formula_h = 40 * mm
        c.drawImage(formula_image_path, margin, page_height - margin - 45 * mm,
                    width=formula_w, height=formula_h, preserveAspectRatio=True, mask='auto')
    else:
        c.setFont("Helvetica", 10)
        c.drawString(margin, page_height - margin - 10 * mm, "(Formula image missing)")

    # === Kriging image with station labels ===
    if kriging_labels_image_path and os.path.exists(kriging_labels_image_path):
        img = Image.open(kriging_labels_image_path)
        img_w, img_h = img.size
        aspect = img_h / img_w

        image_target_width = col1_w - 2 * margin
        image_target_height = image_target_width * aspect

        x_img = margin
        y_img = (page_height - image_target_height) / 2

        c.drawImage(kriging_labels_image_path, x_img, y_img,
                    width=image_target_width, height=image_target_height,
                    preserveAspectRatio=True, mask='auto')
    else:
        c.setFont("Helvetica", 10)
        c.drawString(col_split + margin, page_height / 2, "(Map image missing)")

    # === Map image (screenshot) ===
    map_x = col1_w + margin
    map_max_w = col2_w - 2 * margin
    map_max_h = 90 * mm
    y_map = page_height - (margin * 1.5) - map_max_h
    if html_screenshot_path and os.path.exists(html_screenshot_path):
        img = Image.open(html_screenshot_path)
        aspect = img.height / img.width
        new_w = map_max_w
        new_h = new_w * aspect
        if new_h > map_max_h:
            new_h = map_max_h
            new_w = new_h / aspect
        c.drawImage(html_screenshot_path, map_x, y_map,
                    width=new_w, height=new_h, preserveAspectRatio=True, mask="auto")
    else:
        c.setFont("Helvetica", 10)
        c.drawString(col_split + margin, page_height / 2, "(Screenshot missing)")

    # === Table ===
    table_x = map_x
    table_y = y_map - 5 * mm
    c.setFont("Helvetica-Bold", 8)
    c.drawString(table_x, table_y, "Model      Transform    RMSE       MAE       R²")
    c.setFont("Helvetica", 7)
    for i, (model, transform, rmse, mae, r2) in enumerate(results):
        y = table_y - (i + 1) * 4 * mm
        line = f"{model:<10s} {transform:<10s}  {rmse:<8.5f}  {mae:<8.5f}  {r2:<6.3f}"
        c.drawString(table_x, y, line)

    # === Additional image (bottom-right) ===
    if additional_image_path and os.path.exists(additional_image_path):
        img = Image.open(additional_image_path)
        img_w, img_h = img.size
        aspect = img_h / img_w

        add_img_w = map_max_w / 2
        add_img_h = add_img_w * aspect
        if add_img_h > 80 * mm:
            add_img_h = 80 * mm
            add_img_w = add_img_h / aspect

        x_add_img = map_x + map_max_w - add_img_w
        y_add_img = table_y - add_img_h
        c.drawImage(additional_image_path, x_add_img, y_add_img,
                    width=add_img_w, height=add_img_h,
                    preserveAspectRatio=True, mask='auto')
    else:
        c.setFont("Helvetica", 10)
        c.drawString(map_x + map_max_w - 50 * mm, margin + 5 * mm, "(Additional image missing)")

    c.showPage()
    c.save()
    print(f"✅ PDF report saved to: {output_path}")